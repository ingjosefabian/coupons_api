plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

apply plugin: 'java'
apply plugin: 'jacoco'

group = 'api.meli.com.co'
version = '1.0.0'
description = 'coupon_api'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
	manifest{
		attributes 'Implementation-Title': project.description,
				'Implementation-Version':  project.version
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.3")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.apache.commons:commons-collections4:4.0'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'com.github.ben-manes.caffeine:caffeine:2.8.5'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation  'org.springframework.cloud:spring-cloud-contract-wiremock:2.2.3.RELEASE'
	testImplementation 'com.github.tomakehurst:wiremock:2.26.3'
	testImplementation 'com.tngtech.archunit:archunit-junit5-api:0.21.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform {
		excludeTags 'ide'
	}
	testLogging {
		events "passed", "skipped", "failed"
	}
}

test {
	finalizedBy
}
jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			excludes = ['**.*CouponsApiApplication*',
						'**.config.*',
						'**.config.**.*',
						'**.exceptions.*',
						'**.exceptions.**.*',
						'**.clients.*',
						'**.clients.**.*',
						'**.contracts.*',
						'**.contracts.**.*'
			]

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.9
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport